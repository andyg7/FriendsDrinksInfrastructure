---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS resources'

Parameters:
  VPCStackName:
    Type: String
    Description: VPC stack name

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSWorkerNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  ClusterOIDCLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:*OpenIDConnectProvider*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  EKSCluster:
    DependsOn: EKSClusterRole
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: EKSCluster
      Version: '1.19'
      RoleArn: !GetAtt EKSClusterRole.Arn
      KubernetesNetworkConfig:
        ServiceIpv4Cidr: '10.100.0.0/16'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${VPCStackName}-SecurityGroup"
        SubnetIds:
          Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::Sub: "${VPCStackName}-SubnetIds"

  EKSNodegroup:
    DependsOn: EKSWorkerNodeInstanceRole
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      AmiType: 'AL2_x86_64'
      CapacityType: 'ON_DEMAND'
      ClusterName: !Ref EKSCluster
      NodegroupName: 'EKSNodegroup'
      NodeRole: !GetAtt EKSWorkerNodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 2
      InstanceTypes:
        - 'm5.large'
      Subnets:
        Fn::Split:
          - ","
          - Fn::ImportValue:
              Fn::Sub: "${VPCStackName}-PrivateSubnetIds"

  ClusterOIDCProvider:
    Type: Custom::ClusterOIDCProvider
    Properties:
      ServiceToken: !GetAtt ClusterOIDCProviderFunction.Arn
      EKSClusterName: !Ref EKSCluster

  ClusterOIDCProviderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ClusterOIDCLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          eks = boto3.client("eks")
          def lambda_handler(event, context):
            data = {}
            try:
              eks_describe_cluster_resp = eks.describe_cluster(name=event['ResourceProperties']['EKSClusterName'])
              oidc_issuer_url = eks_describe_cluster_resp['cluster']['identity']['oidc']['issuer']
              if event['RequestType'] == 'Create':
                # This is the ca thumbprint of AWS's issuer
                issuer_thumbprint = '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'
                resp = iam.create_open_id_connect_provider(Url=oidc_issuer_url,ClientIDList=['sts.amazonaws.com'],ThumbprintList=[issuer_thumbprint])
                provider_arn = resp['OpenIDConnectProviderArn']
                data["Reason"] = "Provider with ARN " + provider_arn + " created"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data, provider_arn)
              elif event['RequestType'] == 'Delete':
                provider_arn = event["PhysicalResourceId"]
                if provider_arn is None:
                  data["Reason"] = "Provider not present"
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data, provider_arn)
                else:
                  resp = iam.delete_open_id_connect_provider(OpenIDConnectProviderArn=provider_arn)
                  data["Reason"] = "Provider with ARN " + provider_arn + " deleted"
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data, provider_arn)
              else:
                data["Reason"] = "Unknown operation: " + event['RequestType']
                cfnresponse.send(event, context, cfnresponse.FAILED, data, "")
            except Exception as e:
              data["Reason"] = "Cannot " + event['RequestType'] + " Provider" + str(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, data, "")

Outputs:
  EKSClusterRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EKSClusterRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"

  EKSWorkerNodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt EKSWorkerNodeInstanceRole.Arn

  EKSClusterName:
    Description: EKS cluster name
    Value: !Ref EKSCluster
    Export:
      Name: !Sub "${AWS::StackName}-EKSClusterName"

  EKSClusterEndpoint:
    Description: API server endpoint
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-EKSClusterEndpoint"
